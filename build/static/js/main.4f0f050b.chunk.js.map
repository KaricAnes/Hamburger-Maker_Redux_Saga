{"version":3,"sources":["components/Burger/BurgerIngredients/BurgerIngredient.module.css","components/Navigation/SideDrawer/SideDrawer.module.css","components/Burger/BuildControls/BuildControl/BuildControl.module.css","components/UI/Input/Input.module.css","components/Navigation/ToolBar/ToolBar.module.css","components/Burger/BuildControls/BuildControls.module.css","components/Order/Order.module.css","components/Navigation/NavigationItems/NavigationItem/NavigationItem.module.css","components/Burger/Burger.module.css","components/UI/Button/Button.module.css","hoc/Layout/Layout.module.css","assets/images/burger-logo.png","components/Logo/Logo.module.css","components/Navigation/NavigationItems/NavigationItems.module.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.module.css","components/UI/Backdrop/Backdrop.module.css","components/UI/Modal/Modal.module.css","components/UI/Spinner/Spinner.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","containers/Auth/Auth.module.css","hoc/Auxic/Auxilary.js","components/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/ToolBar/ToolBar.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","components/Burger/BurgerIngredients/BurgerIngredients.js","components/UI/Button/Button.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildContol.js","components/Burger/BuildControls/BuildControlls.js","components/UI/Modal/Modal.js","components/Burger/ModalOrderSummary/ModalOrderSummary.js","axios-orders.js","components/UI/Spinner/Spinner.js","hoc/withErrorHandler/withErrorHandler.js","store/actions/burgerBuilderA.js","store/actions/orderA.js","store/actions/authA.js","store/actions/actionTypes.js","containers/BurgerBuilder/BurgerBuilder.js","components/Order/CheckoutSummary/CheckoutSummary.js","components/UI/Input/Input.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/Order/Order.js","containers/Orders/Orders.js","containers/Auth/Auth.js","containers/Auth/Logout/Logout.js","App.js","serviceWorker.js","store/reducers/orderR.js","store/reducers/burgerBuiilderR.js","store/utility.js","store/reducers/authR.js","index.js"],"names":["module","exports","auxilary","props","children","logo","className","classes","Logo","style","height","src","logoB","alt","navigationItem","NavigationItem","to","linkk","exact","activeClassName","active","navigationItems","NavigationItems","isAuth","drawerToggle","DrawerToggle","onClick","klik2","toolbar","ToolBar","DesktopOnly","backdrop","show","Backdrop","clicked","sideDrawer","attachedClasses","SideDrawer","Closed","Open","klik","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","toggleSideDrawerHandler","prevState","this","isAuthenticated","Content","Component","connect","authR","token","burgerIngredients","ingredient","type","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","Kecap","button","disabled","Button","btntype","withRouter","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","console","log","length","SastojciP","Burger","buildContol","BuildControl","Label","label","Less","oduzet","More","added","controls","buildControlls","BuildControls","TrenutnaCijena","price","toFixed","ctrl","ingredientAdded","ingredientOduzet","purchaseHandler","purchaseButtonEnabled","OrderButton","Modal","nextProps","nextState","modalClosed","transform","opacity","OrderSummary","ingredientSumamry","textTransform","summaryCijena","modalCanceledHandler","modalContinueHandler","instance","axios","create","baseURL","spinner","loader","witErrorHandler","WrappedComponent","error","errorConfirmedHandler","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","eject","message","INGREDIENT_PRICE","meat","cheese","bacon","salad","kecap","setAuthRedirectPath","path","logout","localStorage","removeItem","checkAuthTimout","expirationTime","dispatch","setTimeout","authSuccess","userId","idToken","BurgerBuilder","porucljivo","modalVisibility","onSetAuthRedirectPathBB","history","push","modalCancelHandler","onPurchaseInit","pathname","onInitIngredients","ings","sum","lessButtonsEnability","summary","burger","Spinner","onAddIngredient","onRemoveIngredient","totPrice","purchaseButtonEnability","ModalOrderSummary","loading","burgerBuilderR","totalPrice","building","name","ingredientName","val","actionCreators","get","then","data","catch","withErrorHandler","checkoutSummary","CheckoutSummary","width","margin","CheckoutCancelled","CheckoutContinued","input","inputElement","inputClasses","InputElement","invalid","shouldValidate","touched","Invalid","elementType","elementConfig","value","onChange","changed","options","option","displayValue","Input","ContactData","orderForm","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","narudzba","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","test","formElementsArray","id","config","form","onSubmit","formElement","orderR","post","orderID","purchaseBurgerSuccess","purchaseBurgerFailed","Checkout","CheckoutCancelledHandler","goBack","scrollToBottom","messagesEnd","scrollIntoView","behavior","CheckoutContinuedHandler","purchasedRedirect","purchased","match","component","float","clear","ref","Order","ingredientOutput","ig","IngredientOutput","IngredintsPadding","Orders","onFetchOrders","orders","order","queryParams","fetchedOrders","err","Auth","password","isEmail","isSignUp","controlName","updatedControls","submitHandler","onAuth","switchAuthModeHandler","authRedirectPath","onSetAuthRedirectPath","authRedirect","errorMessage","color","authData","returnSecureToken","url","expirationDate","Date","getTime","expiresIn","setItem","localId","actionCreatorsAuth","Logout","onLogout","App","onTryAutoSignUp","routes","Hamburger","getItem","Boolean","window","location","hostname","initialState","reducer","action","newOrder","updateObject","oldObject","updatedProperties","authStart","authFail","authLogout","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f0f050b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient_BreadBottom__372jZ\",\"BreadTop\":\"BurgerIngredient_BreadTop__3yLRd\",\"Seeds1\":\"BurgerIngredient_Seeds1__2_T5o\",\"Seeds2\":\"BurgerIngredient_Seeds2__2OlT_\",\"Meat\":\"BurgerIngredient_Meat__2inEt\",\"Cheese\":\"BurgerIngredient_Cheese__1OYGK\",\"Salad\":\"BurgerIngredient_Salad__1S-1x\",\"Bacon\":\"BurgerIngredient_Bacon__XmXjs\",\"Kecap\":\"BurgerIngredient_Kecap__2Q4b7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__1giGW\",\"Open\":\"SideDrawer_Open__2KmKu\",\"Closed\":\"SideDrawer_Closed__pI8FR\",\"Logo\":\"SideDrawer_Logo__8V3Yf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControl\":\"BuildControl_BuildControl__2yWK2\",\"Label\":\"BuildControl_Label__3mxnJ\",\"Less\":\"BuildControl_Less__yurH_\",\"More\":\"BuildControl_More__2CVcH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__RV_VX\",\"Label\":\"Input_Label__1osHF\",\"InputElement\":\"Input_InputElement__3BV5V\",\"Invalid\":\"Input_Invalid__--6N2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToolBar\":\"ToolBar_ToolBar__2TZc_\",\"Logo\":\"ToolBar_Logo__2Kxq7\",\"DesktopOnly\":\"ToolBar_DesktopOnly__xjD2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControls\":\"BuildControls_BuildControls__1O5zB\",\"TrenutnaCijena\":\"BuildControls_TrenutnaCijena__2eyOE\",\"OrderButton\":\"BuildControls_OrderButton__3rraH\",\"enable\":\"BuildControls_enable__3PxFw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2Bp4v\",\"IngredientOutput\":\"Order_IngredientOutput__DILpU\",\"IngredintsPadding\":\"Order_IngredintsPadding__2VKvs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2YWFK\",\"active\":\"NavigationItem_active__3-yuv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger_Burger__1F7jP\",\"SastojciP\":\"Burger_SastojciP__1vRki\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2x1-q\",\"Success\":\"Button_Success__2BSqw\",\"Danger\":\"Button_Danger__2q9xl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__1fcI-\"};","module.exports = __webpack_public_path__ + \"static/media/burger-logo.b8503d26.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__6aMGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__1DkHw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__lenmC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__pU5rE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__r5pkB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner_loader__1DR2-\",\"load2\":\"Spinner_load2__PKcqe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2yHD-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1mlyw\",\"Input\":\"ContactData_Input__350Le\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2FjAY\"};","//Aux je isti i u hambasu ovdje a i u Diving Deeper into comps\r\n//Ne koristimo ovdje JSX pa nam ne treba import react\r\n\r\n\r\nconst auxilary = props => props.children;\r\n\r\nexport default auxilary;","import React from 'react';\r\nimport logoB from '../../assets/images/burger-logo.png';\r\nimport classes from './Logo.module.css';\r\n\r\nconst logo = (props) => (\r\n\r\n//Inline Styling za visinu\r\n    <div className = {classes.Logo} style = {{height: props.height}}>\r\n\r\n   <img src={logoB} alt=\"Hambas\"/>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n);\r\n\r\nexport default logo;","import React from 'react';\r\nimport classes from './NavigationItem.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst navigationItem = (props) => (\r\n\r\n/*NavLink\r\nako hocemo da korsitimo NAvLink, u cssu mora biti klasa active a ne neko drugo ime\r\ndodali smo ovaj activeClassName koji se moze dodati samo u NAvLinku. Dog ga nije bilo nije mi radio active Links\r\n*/\r\n\r\n\r\n\r\n<li className = {classes.NavigationItem}>\r\n    <NavLink\r\n       to={props.linkk}\r\n       exact\r\n       activeClassName = {classes.active}>{props.children}</NavLink>\r\n</li>\r\n\r\n\r\n\r\n\r\n);\r\n\r\nexport default navigationItem;","import React from \"react\";\r\nimport classes from \"./NavigationItems.module.css\";\r\nimport NavigationItem from \"./NavigationItem/NavigationItem\";\r\n\r\nconst navigationItems = (props) => {\r\n  //zelimo da se ova Autentifikacija vidi samo kada nismo logovani. A Logout da se vidi ako smo logovani.\r\n  //da bismo to uradili treba nam state u navigatioItem-u ali je glupa funkcionalna i ne mozemo je povezati sa Reduxom\r\n  //Mogli smo ovu komponentu pretvoriti u klasnu pa dole pozvati mapStateToProps ili ReactHooks da korsitimo  ali necemo to.\r\n  //JEr bi nam to razbilo ideju o kontejnerima koji znaju za store, i glupim funkcionalnim koje ne znaju za store.\r\n  //Umjesto toga otici cemo u parent component koja ucitava ovu komponentu: LAyout.js --> klasna pametna\r\n  //Ustvari ona ucitava ToolBar i SideDrawer koji sadrze NavigationItems\r\n  //nakon  uspjesnog logina, baca nas na '/' ( uradj. u Auth.js kontejneru ). osim ako nismo prvo bildali burger. authRedirect\r\n\r\n  return (\r\n    <ul className={classes.NavigationItems}>\r\n      <NavigationItem linkk=\"/\">Burger Builder</NavigationItem>\r\n      {props.isAuth ? (\r\n        //props.isAuth stize iz LAyout kontejnera preko ToolBar-a. isAuth je true, ako token nije null u AuthR.js\r\n        <NavigationItem linkk=\"/orderss\">Narudžbe</NavigationItem>\r\n      ) : null}\r\n      {props.isAuth ? (\r\n        //props.isAuth stize iz LAyout kontejnera preko ToolBar-a. isAuth je true, ako token nije null u AuthR.js-u\r\n        <NavigationItem linkk=\"/logout\">LogOut</NavigationItem> // /logout nas baca na Logout.js komponentu koja ce nas redirektati na HPage i ocistiti token i userID u STORE-u i localStoreage-u\r\n      ) : (\r\n        <NavigationItem linkk=\"/auth\">SignIn/SignUp</NavigationItem>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default navigationItems;\r\n","import React from 'react';\r\nimport classes from './DrawerToggle.module.css';\r\n\r\nconst drawerToggle = (props) => (\r\n\r\n\r\n<div className = {classes.DrawerToggle} onClick = {props.klik2}>\r\n    \r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n\r\n</div>\r\n\r\n\r\n\r\n);\r\n\r\nexport default drawerToggle;","import React from \"react\";\r\nimport classes from \"./ToolBar.module.css\";\r\nimport Logo from \"../../Logo/Logo\";\r\nimport NavigationItems from \"../NavigationItems/NavigationItems\";\r\nimport DrawerToggle from \"../SideDrawer/DrawerToggle/DrawerToggle\";\r\n\r\nconst toolbar = (props) => (\r\n  <header className={classes.ToolBar}>\r\n    <DrawerToggle klik2={props.klik2} />\r\n\r\n    <div className={classes.Logo}>\r\n      <Logo />\r\n    </div>\r\n\r\n    <nav className={classes.DesktopOnly}>\r\n      <NavigationItems isAuth={props.isAuth} />\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default toolbar;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Backdrop.module.css\";\r\n\r\nconst backdrop = (props) =>\r\n  props.show ? (\r\n    <div className={classes.Backdrop} onClick={props.clicked}></div>\r\n  ) : null;\r\n\r\nexport default backdrop;\r\n","import React from 'react';\r\nimport Logo from '../../Logo/Logo';\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\nimport classes from './SideDrawer.module.css';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\nimport Auxic from '../../../hoc/Auxic/Auxilary';\r\n\r\n\r\n\r\n\r\nconst sideDrawer = (props) => {\r\n//dodali smo i return je r zelimo da se nesto desi prije returnanja JSX coda\r\n//radi se o css klasama koje ce definisati neku animaciju \r\n\r\nlet attachedClasses = [classes.SideDrawer, classes.Closed];\r\n\r\nif(props.show) {\r\n\r\n  attachedClasses = [classes.SideDrawer, classes.Open];\r\n  \r\n}\r\n\r\nreturn(\r\n\r\n  <Auxic>\r\n\r\n  <Backdrop show =  {props.show} clicked = {props.klik}/>\r\n\r\n    <div className = {attachedClasses.join(' ')} onClick = {props.klik}>\r\n\r\n      <div className = {classes.Logo}>\r\n        <Logo/>\r\n      </div>\r\n  \r\n\r\n  <nav>.\r\n     <NavigationItems\r\n      isAuth = {props.isAuth}/> \r\n  </nav>\r\n\r\n\r\n    </div>\r\n\r\n    </Auxic>\r\n\r\n\r\n);\r\n};\r\n\r\nexport default sideDrawer;","import React, { Component } from \"react\";\r\n\r\nimport Auxic from \"../Auxic/Auxilary\";\r\n\r\nimport classes from \"./Layout.module.css\";\r\n\r\nimport Toolbar from \"../../components/Navigation/ToolBar/ToolBar\";\r\n\r\nimport SideDrawer from \"../../components/Navigation/SideDrawer/SideDrawer\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Layout extends Component {\r\n  state = {\r\n    showSideDrawer: false,\r\n  };\r\n\r\n  sideDrawerClosedHandler = () => {\r\n    this.setState({ showSideDrawer: false });\r\n  };\r\n\r\n  toggleSideDrawerHandler = () => {\r\n    /*const doesShow = this.state.showSideDrawer;\r\n        this.setState({showSideDrawer: !doesShow});*/\r\n\r\n    /* this.setState({showSideDrawer: !this.state.showSideDrawer});   Ovaj moze izazvati nuspojave*/\r\n\r\n    this.setState((prevState) => {\r\n      return { showSideDrawer: !prevState.showSideDrawer };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Auxic>\r\n        <Toolbar\r\n          isAuth={this.props.isAuthenticated}\r\n          klik2={this.toggleSideDrawerHandler}\r\n        />\r\n\r\n        <SideDrawer\r\n          isAuth={this.props.isAuthenticated}\r\n          show={this.state.showSideDrawer}\r\n          klik={this.sideDrawerClosedHandler}\r\n        />\r\n\r\n        <main className={classes.Content}>{this.props.children}</main>\r\n      </Auxic>\r\n    );\r\n  }\r\n}\r\n\r\n//subscription\r\n//1. konfiguracija\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.authR.token !== null,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Layout);\r\n","import React from \"react\";\r\nimport classes from \"./BurgerIngredient.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst burgerIngredients = (props) => {\r\n  //debugger;\r\n\r\n  let ingredient = null;\r\n\r\n  switch (props.type) {\r\n    case \"bread-bottom\":\r\n      //debugger;\r\n      ingredient = <div className={classes.BreadBottom}></div>;\r\n      break;\r\n\r\n    case \"bread-top\":\r\n      //debugger;\r\n      ingredient = (\r\n        <div className={classes.BreadTop}>\r\n          <div className={classes.Seeds1}></div>\r\n          <div className={classes.Seeds2}></div>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    case \"meat\":\r\n      //debugger;\r\n      ingredient = <div className={classes.Meat}></div>;\r\n      break;\r\n\r\n    case \"cheese\":\r\n      //debugger;\r\n      ingredient = <div className={classes.Cheese}></div>;\r\n      break;\r\n\r\n    case \"salad\":\r\n      //debugger;\r\n      ingredient = <div className={classes.Salad}></div>;\r\n      break;\r\n\r\n    case \"bacon\":\r\n      //debugger;\r\n      ingredient = <div className={classes.Bacon}></div>;\r\n      break;\r\n\r\n    case \"kecap\":\r\n      //debugger;\r\n      ingredient = <div className={classes.Kecap}></div>;\r\n      break;\r\n\r\n    default:\r\n      ingredient = null;\r\n  }\r\n\r\n  return ingredient;\r\n};\r\n\r\nburgerIngredients.propTypes = {\r\n  // click: PropTypes.func,\r\n  type: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default burgerIngredients;\r\n","import React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst button = (props) => (\r\n  <button\r\n    //Mi uvijek zelimo dodijeliti button, ali danger i success samo uslovno\r\n    //Ono sto proslijedimo u className mora biti String, sada trenutno je array Of Strings. Zato smo dodali .join\r\n    disabled={props.disabled}\r\n    className={[classes.Button, classes[props.btntype]].join(\" \")}\r\n    onClick={props.clicked}\r\n  >\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default button;\r\n","//Ovo bi treabo biti burger koji cemo renderovati na ekran\r\nimport React from \"react\";\r\nimport Sastojci from \"./BurgerIngredients/BurgerIngredients\";\r\nimport classes from \"./Burger.module.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Button from \"../UI/Button/Button\";\r\n\r\nconst burger = (props) => {\r\n  //debugger;\r\n  //console.log(props);\r\n\r\n  let transformedIngredients = Object.keys(props.ingredients)\r\n    .map((igKey) => {\r\n      //debugger;\r\n      return [...Array(props.ingredients[igKey])].map((_, i) => {\r\n        //debugger;\r\n        return <Sastojci key={igKey + i} type={igKey} />;\r\n        //igKey je npr. Salata, a i je 1,2,3\r\n        //key je: salad0, salad1, cheese\r\n      });\r\n    }) //;   dok je bila ovdje, nije radilo reduce\r\n\r\n    .reduce((arr, el) => {\r\n      return arr.concat(el);\r\n    }, []);\r\n  //reduce smo morali dodati da bi smo\r\n  //mogli izbrojati duzinu lengtha i vidjeti je li nula\r\n\r\n  //arr je previous value, el je current value\r\n\r\n  // console.log(transformedIngredients);\r\n\r\n  //Mislim da ce i ovdje morati nekako nastmati ingredients\r\n  //A evo i kako cemo ih stimati, posto j estate tamo objekat a ne array, ne mozemo na njega spucati map func\r\n  //zato cemo ovdje pretvoriti tamosnje ingredients u array of strings\r\n  //object.keys metoda koja extraktuje kljuceve datog objekta i pretvara ih u array keyeva/kljuceva. a kljucevi su ustvari Salda, Bacon\r\n  //Dakle dobit cemo array of Strings\r\n  //map funkcija executa funkcija na svaki element u arrayu, dakl to je nasa verzija for loopa da prodjemo kroz sve clanove\r\n  //da ih procesljamo\r\n\r\n  //Da sumiramo ovo gore, ovo je dakle nacin da da transformisemo\r\n  //jedan objekat koji sadrzi key value pairs, u array of burger ingredients\r\n  //gdje nam je vrijednost objekta(value) vazna da odlucimo koliko sastojaka nam treba\r\n  // key nam je vazan da znamo koji sastojak da dodamo\r\n  console.log(transformedIngredients);\r\n\r\n  if (transformedIngredients.length === 0) {\r\n    console.log(transformedIngredients);\r\n\r\n    //debugger;\r\n    transformedIngredients = (\r\n      <p className={classes.SastojciP}>Dodajte sastojke po želji!</p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={classes.Burger}\r\n      /*style={{\r\n          transform: props.burgerVisibility\r\n            ? \"translateY(0)\"\r\n            : \"translateY(-110vh)\",\r\n        }}*/\r\n    >\r\n      <Sastojci type=\"bread-top\" />\r\n\r\n      {transformedIngredients}\r\n\r\n      <Sastojci type=\"bread-bottom\" />\r\n    </div>\r\n  );\r\n};\r\n\r\n//Zahvaljuci withRouter imamo prsitup historiji, match, location iako Burger.js nije ucitan direktno preko rute\r\nexport default withRouter(burger);\r\n","import React from \"react\";\r\nimport classes from \"./BuildControl.module.css\";\r\n\r\nconst buildContol = (props) => {\r\n  //debugger;\r\n  return (\r\n    <div className={classes.BuildControl}>\r\n      <div className={classes.Label}>{props.label}</div>\r\n\r\n      <button\r\n        className={classes.Less}\r\n        onClick={props.oduzet}\r\n        disabled={props.disabled}\r\n      >\r\n        Manje\r\n      </button>\r\n\r\n      <button className={classes.More} onClick={props.added}>\r\n        Više\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default buildContol;\r\n","import React from \"react\";\r\nimport BuildControl from \"./BuildControl/BuildContol\";\r\nimport classes from \"./BuildControls.module.css\";\r\n\r\nconst controls = [\r\n  { label: \"Salata\", type: \"salad\" },\r\n  { label: \"Pećenica\", type: \"bacon\" },\r\n  { label: \"Sir\", type: \"cheese\" },\r\n  { label: \"Meso\", type: \"meat\" },\r\n  /*{ label: \"Kecap\", type: \"kecap\" },*/\r\n]; //types su isti kao u reduceru sto su properties u initialState-u koji pristignu iz fire-base-a\r\n\r\nconst buildControlls = (props) => {\r\n  //debugger;\r\n\r\n  //Namjernos smo stavili ove divove dole da bi smo mogli kontrolisati\r\n  //styling\r\n  return (\r\n    <div className={classes.BuildControls}>\r\n      <p className={classes.TrenutnaCijena}>\r\n        Trenutna Cijena: <strong>{props.price.toFixed(2)}</strong> KM\r\n      </p>\r\n\r\n      {controls.map((ctrl) => (\r\n        <BuildControl\r\n          /* added = {props.addIngredientHandler}*/\r\n          key={ctrl.label}\r\n          label={ctrl.label}\r\n          //type = {ctrl.type}\r\n          added={() => props.ingredientAdded(ctrl.type)} // ctrl.type --> ide u BurgerBuilder u akciju kao payload\r\n          oduzet={() => props.ingredientOduzet(ctrl.type)} // ctrl.type --> ide u BurgerBuilder u akciju kao payload\r\n          disabled={props.disabled[ctrl.type]} //disabledInfo = {salad: false, bacon: true, cheese: true, meat: true}  disabled = true/false\r\n        />\r\n      ))}\r\n\r\n      <button\r\n        onClick={props.purchaseHandler}\r\n        disabled={!props.purchaseButtonEnabled} //true ili false\r\n        className={classes.OrderButton}\r\n      >\r\n        {\r\n          props.isAuth\r\n            ? \"ORDER NOW\"\r\n            : \"SIGN UP TO ORDER\" /*Idemo na Auth.js ili nam iskace modal. Definisano u purchasingHandler() u BurgerB */\r\n        }\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default buildControlls;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Modal.module.css\";\r\nimport Auxic from \"../../../hoc/Auxic/Auxilary\";\r\nimport Bacdrop from \"../Backdrop/Backdrop\";\r\n\r\nclass Modal extends Component {\r\n  //Modal i ModalOrderSummary su povezani u BurgerBuilderu u returnu gdje je modal opkolio ModalOrderSummary\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    /*if(nextProps.show !== this.props.show) {\r\n        return true;\r\n    }*/\r\n\r\n    /*Spinner nije radio dok nismo ovo dole rijesili*/\r\n    return (\r\n      nextProps.show !== this.props.show ||\r\n      nextProps.children !== this.props.children\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Auxic>\r\n        <Bacdrop show={this.props.show} clicked={this.props.modalClosed} />\r\n\r\n        <div\r\n          className={classes.Modal}\r\n          style={{\r\n            transform: this.props.show ? \"translateY(0)\" : \"translateY(-110vh)\", //show potice iz BugerB state-a\r\n            opacity: this.props.show ? \"1\" : \"0\",\r\n          }}\r\n        >\r\n          {this.props.children}\r\n        </div>\r\n      </Auxic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport Auxic from \"../../../hoc/Auxic/Auxilary\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nclass OrderSummary extends Component {\r\n  //Moze biti i funkcionalna\r\n  //Ovo je modal\r\n\r\n  componentDidUpdate() {\r\n    //console.log('[OrderSumary] Did Update');\r\n  }\r\n\r\n  render() {\r\n    //ovaj fazon sam objasnio u arrayMethod.js\r\n    //ovaj fazon je koristen i za porucivanje button da zbrojimo da li su values od ings-a veci od nula pa da\r\n    //disablamo order button\r\n    const ingredientSumamry = Object.keys(this.props.ingredients).map(\r\n      (igKey) => {\r\n        return (\r\n          <li key={igKey}>\r\n            <span style={{ textTransform: \"capitalize\" }}>{igKey}</span>:{\" \"}\r\n            {this.props.ingredients[igKey]}\r\n          </li>\r\n        );\r\n      }\r\n    );\r\n\r\n    return (\r\n      <Auxic>\r\n        <h3>Tvoja Narudzba</h3>\r\n        <p>Ukusni hamburger sa sljedećim sastojcima:</p>\r\n\r\n        <ul>{ingredientSumamry}</ul>\r\n        <p>\r\n          <strong>\r\n            Cijena vase narudzbe je: {this.props.summaryCijena.toFixed(2)} KM\r\n          </strong>\r\n        </p>\r\n        <p>Continue to Checkout?</p>\r\n\r\n        <Button btntype=\"Danger\" clicked={this.props.modalCanceledHandler}>\r\n          ODUSTANI\r\n        </Button>\r\n        <Button btntype=\"Success\" clicked={this.props.modalContinueHandler}>\r\n          NASTAVI\r\n        </Button>\r\n      </Auxic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OrderSummary;\r\n","import axios from \"axios\";\r\n\r\n/*Na ovaj link cemo slati requestove da bi storali podatke u nasu bazu podataka. */\r\n/*Namjerno nismo podesili da  */\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://react-moj-hamburger.firebaseio.com/\",\r\n});\r\n\r\nexport default instance;\r\n","import React from 'react';\r\nimport classes from './Spinner.module.css';\r\n\r\nconst spinner = (props) => (\r\n\r\n<div className={classes.loader}>Loading...</div>\r\n\r\n);\r\n\r\nexport default spinner;","import React, {Component} from 'react';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport Auxic from '../Auxic/Auxilary';\r\n\r\n//Funkcija koja prihvata wrappedComponent kao input \r\n//a koja vraca funkciju koja prima propsa onda vraca naravno JSX\r\n//axios nam treba da bismo mogli postaviti globalni errorHandler\r\n\r\nconst witErrorHandler = (WrappedComponent, axios) => {\r\n\r\nreturn class extends Component {\r\n    state = {\r\n        error:null\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.reqInterceptor = axios.interceptors.request.use(req => {\r\n            this.setState({error:null});\r\n            return req;\r\n        });\r\n\r\n        /*Ovaj error je iz firebasea, to je ustvari objekat koji sadrzi error message */\r\n    this.resInterceptor = axios.interceptors.response.use(res => res, error => {\r\n        this.setState({error: error})\r\n\r\n    });    \r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n\r\n       \r\naxios.interceptors.request.eject(this.reqInterceptor);\r\naxios.interceptors.response.eject(this.resInterceptor);\r\n\r\n    }\r\n\r\n    errorConfirmedHandler = () => {\r\nthis.setState({error:null})\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Auxic>\r\n            \r\n                <Modal\r\n                show = {this.state.error}\r\n                modalClosed = {this.errorConfirmedHandler}>\r\n                   {this.state.error ? this.state.error.message : null}>\r\n\r\n                </Modal>\r\n            \r\n                \r\n                <WrappedComponent {...this.props}/>\r\n            \r\n            \r\n            \r\n            </Auxic>        \r\n                );\r\n            }\r\n            \r\n            \r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n  \r\n\r\n    \r\n\r\nexport default witErrorHandler;","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"../../axios-orders\";\r\n\r\nconst INGREDIENT_PRICE = {\r\n  meat: 1,\r\n  cheese: 0.5,\r\n  bacon: 0.5,\r\n  salad: 0.5,\r\n  kecap: 0.3,\r\n};\r\n\r\nexport const addIngredient = (name) => {\r\n  return {\r\n    type: actionTypes.ADD_INGREDIENT,\r\n    ingredientName: name,\r\n    //ingredientName se mora podudarati sa onim ingredientName u reduceru u switchu   action.ingredientName\r\n    val: INGREDIENT_PRICE[name], //val mi je bita za cijenu\r\n  };\r\n};\r\n\r\nexport const removeIngredient = (name) => {\r\n  return {\r\n    type: actionTypes.REMOVE_INGREDIENT,\r\n    ingredientName: name,\r\n    //ingredientName se mora podudarati sa onim ingredientName u reduceru u switchu   action.ingredientName\r\n    val: INGREDIENT_PRICE[name], //val mi je bita za cijenu\r\n  };\r\n};\r\n\r\n//sinq kod\r\nexport const setIngredients = (ingredients) => {\r\n  //debugger;\r\n  return {\r\n    type: actionTypes.SET_INGREDIENTS,\r\n    ingredients,\r\n  };\r\n};\r\n\r\nexport const setIngredientsFailed = () => {\r\n  return {\r\n    type: actionTypes.SET_INGREDIENTS_FAILED, //seta error na true u reduceru ako se desi greska u fetchIngredients\r\n  };\r\n  /*\r\n//BurgerBuilder error\r\nlet burger = this.props.error ? (\r\n      <p>Sastojci ne mogu biti učitani!</p>\r\n    ) : (\r\n      <Spinner />\r\n    );\r\n*/\r\n};\r\n\r\n//postavljanje ingredinetsa inicijalno\r\n\r\nexport const fetchIngredients = () => {\r\n  return (dispatch) => {\r\n    //debugger;\r\n    //unutar ovog dispatcha mi mozemo executati asinq kod i dipatchati novu akciju kada se zavrsi taj asinq kod zahvaljuci promisu\r\n    axios\r\n      .get(\"https://react-moj-hamburger.firebaseio.com/ingredients.json\")\r\n      .then((response) => {\r\n        //debugger;\r\n        dispatch(setIngredients(response.data));\r\n        //debugger;\r\n      })\r\n      .catch((error) => {\r\n        dispatch(setIngredientsFailed());\r\n      });\r\n  };\r\n};\r\n","//import actionTypes from './actionTypes';\r\nimport axios from \"../../axios-orders\";\r\n\r\n//-----------------------------------------------------proces narucivanja\r\n//sinq\r\n\r\nexport const purchaseBurgerSuccess = (id, orderData) => {\r\n  ////debugger;\r\n  return {\r\n    type: /*actionTypes.PURCHASE_BURGER_FAILED,*/ \"PURCHASE_BURGER_SUCCESS\",\r\n    orderID: id, //orderID: \"-MCgLRJDOBgJ0xFVHdv5\"   ovo je orderID of a newly created order\r\n    orderData: orderData, // orderData potice iz ContactData.js iz orderHandler-a - u njemu se okida akcija purchaseBurger u kojoj se nalazi i ova success\r\n  };\r\n};\r\n\r\n//sinq\r\n\r\nexport const purchaseBurgerFailed = (error) => {\r\n  return {\r\n    //unutar ovog dispatcha mi mozemo executati asinq kod i dipatchati novu akciju kada se zavrsi taj asinq kod\r\n    type: \"PURCHASE_BURGER_FAIL\",\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const purchaseBurgerStart = () => {\r\n  ////debugger;\r\n  return {\r\n    type: \"PURCHASE_BURGER_START\", //setamo loading na true i prikazujemo spinner umjesto forme u ContactData\r\n  };\r\n};\r\n\r\n/*\r\norderData:\r\n\r\ningredients: {kecap: 0, salad: 1, bacon: 1, cheese: 1, meat: 1}\r\norderData: {name: \"d\", street: \"d\", zipCode: \"11111\", country: \"d\", email: \"a.kWW@gmail.com\", …}\r\nprice: 4.5\r\nuserId: \"gbAXYe9qNEOmHoPI0ePSI1Ia9tF2\"    //userId: state.authR.userId, na osnovu njega prikazemo useru samo njegove narudzbe \r\n*/\r\n//token: \"iI6InBhc3N3b3JkInfddffffffffffffffffffffffffffffffffddffddfghghhgerrtrww\"\r\n//asinq + 2 sinq-a\r\n\r\nexport const purchaseBurger = (orderData, token) => {\r\n  //kada kliknemo na order Button treba da se izvrsi\r\n  //orderHandler() u ContactData.js\r\n\r\n  return (dispatch) => {\r\n    ////debugger;\r\n    dispatch(purchaseBurgerStart());\r\n    axios\r\n      .post(\"/orders.json?auth=\" + token, orderData) //token ukraden iz ContactData, this.props.onOrderBurger(narudzba, this.props.token);\r\n      //morali smo poslati i token zbog rules-a na firebase-u.\r\n      .then((response) => {\r\n        ////debugger;\r\n        console.log(response.data); //data: {name: \"-MCgLRJDOBgJ0xFVHdv5\"}   ovo je orderID\r\n        dispatch(purchaseBurgerSuccess(response.data.name, orderData)); //kada nam dodje response sa servera\r\n      })\r\n      .catch((error) => {\r\n        ////debugger;\r\n        dispatch(purchaseBurgerFailed(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const purchaseInit = () => {\r\n  //setta purchased na false da ne bismo bili onemoguceni da udjemo na checkout\r\n  return {\r\n    type: \"PURCHASE_INIT\", //burgerBuilder porucivanjeContinoueHandler(tik prije klika na continue u modalu)\r\n  };\r\n};\r\n//-----------------------------------------------------proces narucivanja\r\n\r\n//-------------------------------------------------povlacenje ordersa sa servera\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n  //debugger;\r\n  /*\r\n  orders[\r\n    {\r\nid: \"-MCqw5i8QspVXsWqlsmz\"\r\ningredients: {bacon: 1, cheese: 1, kecap: 0, meat: 0, salad: 1}\r\norderData: {country: \"bih\", deliveryMethod: \"fastest\", email: \"a.k@gmail.com\", name: \"f\", street: \"f\", …}\r\nprice: 3.5\r\nuserId: \"dSfmP8KgsnVhS9ZNQ1lyT5EM5d73\"\r\n    },\r\n    {\r\n      ...\r\n    }\r\n  ]\r\n  */\r\n  return {\r\n    //unutar ovog dispatcha mi mozemo executati asinq kod i dipatchati novu akciju kada se zavrsi taj asinq kod\r\n    type: \"FETCH_ORDERS_SUCCESS\",\r\n    orders: orders,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersFailed = (error) => {\r\n  //debugger;\r\n  return {\r\n    //unutar ovog dispatcha mi mozemo executati asinq kod i dipatchati novu akciju kada se zavrsi taj asinq kod\r\n    type: \"FETCH_ORDERS_FAIL\",\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const fetchOrdersStart = () => {\r\n  //debugger;\r\n  return {\r\n    type: \"FETCH_ORDERS_STARTT\", //sluzi nam da mozemo doci do reducera i setati loading na true\r\n  };\r\n};\r\n\r\n//asinq kod za povlacenje ordersa sa backenda, u sebi ima i dva sinq koda\r\n//on nam je u neku ruku nepotreban ako cemo poruciti narudzbu i odmah gledati u orders.js\r\n//ako cemo refrshovati starnicu, onda cemo izgubiti sve podatke sa reduxa i local state-a\r\n//tako da onda moramo sa backanda da povlacimo podatke\r\n//okida se u Orders.js u componentDidMount-u\r\nexport const fetchOrders = (token, userId) => {\r\n  //token smo dobili iz Orders.js iz componentDidMount() a mogao sam koristiti i  getState\r\n  return (dispatch) => {\r\n    //debugger;\r\n    dispatch(fetchOrdersStart()); //setamo laoding na true u OrderR.js-u i prikazujemo spinner umjesto orders-a u Orders.js\r\n\r\n    const queryParams =\r\n      \"?auth=\" + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"'; //naredjenje firebase-u filtriraj mi podatke preko userId-a\r\n    axios\r\n      .get(\"/orders.json\" + queryParams) //auth se mora podudarati sa auth u rules u firebase-u. userID also\r\n\r\n      .then((response) => {\r\n        //debugger;\r\n        //--------------------------transforminfData\r\n        const fetchedOrders = [];\r\n\r\n        for (let key in response.data) {\r\n          //response.data: //data:{MCqw5i8QspVXsWqlsmz{ingredients:{}, price:3.6 itd...},{MCqw5i8QspVXsWqlsmz{ingredients:{}, price:3.6 itd...} }\r\n          //debugger;\r\n          fetchedOrders.push({\r\n            ...response.data[key],\r\n            id: key, //ovaj id ce nam biti key za svaku narudzbu   \"-MCqw5i8QspVXsWqlsmz\"\r\n            /*\r\n            fetchedOrders [{\r\n            id: \"-MCqw5i8QspVXsWqlsmz\"\r\n            ingredients: {bacon: 1, cheese: 1, kecap: 0, meat: 0, salad: 1}\r\n            orderData: {country: \"bih\", deliveryMethod: \"fastest\", email: \"a.k@gmail.com\", name: \"f\", street: \"f\", …}\r\n            price: 3.5\r\n            userId: \"dSfmP8KgsnVhS9ZNQ1lyT5EM5d73\"\r\n            }]\r\n            */\r\n          });\r\n        }\r\n        //--------------------------transformingData\r\n\r\n        dispatch(fetchOrdersSuccess(fetchedOrders)); //kada nam dodju ordersi okinemo ovu funkciju, fetchedOrders su transformed iznad\r\n        //debugger;\r\n      })\r\n      .catch((err) => {\r\n        //debugger;\r\n        dispatch(fetchOrdersFailed(err));\r\n      });\r\n  };\r\n};\r\n\r\n//-------------------------------------------------ordersi dolaze sa servera\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\n//okida se u App.js-u: onTryAutoSignUp\r\n//nije asinq ali ima vise akcija u sebi\r\n//if we are logged in and we reload the page, login state is lost\r\n//otpornost na refreshe\r\nexport const authCheckState = () => {\r\n  return (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    if (!token) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\")); //newDate iz stringa u date objekat ga konvertuje\r\n\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        dispatch(authSuccess(token, userId));\r\n        dispatch(\r\n          checkAuthTimout(\r\n            (expirationDate.getTime() - new Date().getTime()) / 1000 //zelim za 15 min automatski logout npr.\r\n          )\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n//nakon sto se uspjesno logujemo, zelimo da idemo nazad na BurgerBuilder ili na Checkout.js u zavisnosti da li smo bildali prethodno nas burger\r\nexport const setAuthRedirectPath = (path) => {\r\n  //burgerBuilder: purchaseHandler, Auth.js: componentDidMount()\r\n  return {\r\n    type: actionTypes.SET_AUTH_REDIRECT_PATH, //sluzi nam da mozemo doci do reducera\r\n    path: path, //mora se podudarati sa reducerom\r\n  };\r\n};\r\n\r\n//sluzi za setanje loadinga na True i prikazivanje spinnera nakon sto kliknemo na submit auth forme\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START, //sluzi nam da mozemo doci do reducera\r\n  };\r\n};\r\n//sinq\r\nexport const logout = () => {\r\n  //poziva se iz Logout.js glupe komponente a ona se ucitava preko => (klik na Logout u headeru -> u NavigationItems) <NavigationItem linkk=\"/logout\">Logout</>\r\n  //checkAuthTimout() akcije,  //automatski se okida sat vremena nakon log-inOVANJA\r\n  //i poziva se u authCheckState() ukoliko nemamo token u localStorage-u ili ukoliko je expirationTime manje od trenutnog vremena\r\n  localStorage.removeItem(\"userId\");\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"expirationDate\");\r\n  //debugger;\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT,\r\n  };\r\n};\r\n\r\n//asinq funkcija koja nakon 3600s poziva logout()\r\n//automatic logout() nakon sat vremena\r\n//poziva se u auth() akciji i authCheckState() akciji nakon sto se uspjesno ulogujemo\r\nexport const checkAuthTimout = (expirationTime) => {\r\n  //dispatch(checkAuthTimout(response.data.expiresIn))\r\n  return (dispatch) => {\r\n    setTimeout(() => {\r\n      dispatch(logout()); //uvijek terba executati ove akcije pozivne\r\n    }, expirationTime * 1000); //covert miliseconds to seconds //3600 ms * 1000 = 3600s = 1hour\r\n  };\r\n};\r\n\r\nexport const authSuccess = (token, userId) => ({\r\n  //mogao sam i ovdje settati token u localStorage, ali mi je potreban i expirationDate tako da sam to\r\n  //odradio u auth.js actionCreatoru\r\n  type: actionTypes.AUTH_SUCCESS,\r\n  idToken: token, //mora se poklapati idToken sa reducerom, //authR.js const authSuccess\r\n  userId: userId,\r\n});\r\n\r\n//\r\nexport const authFailed = (error) => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\n//asinq + 4 sinq-a: authStart(), authSuccess, checkAuthTimeOut, authFailed\r\n\r\nexport const auth = (email, password, isSignUp) => {\r\n  //kada kliknemo na submit Button treba da se izvrsi\r\n  //isSignUp upravlja na koji url cemo posalti podatke SIGNin ili SIGNup\r\n  //ako nam firebase vrati token, mi smo autentifikovani\r\n  return (dispatch) => {\r\n    dispatch(authStart());\r\n    const authData = {\r\n      email: email,\r\n      password: password,\r\n      returnSecureToken: true, //evo kako dobije token. Token is JS object (JSON WEB TOKEN). Obicno ga storamo u Local Storage u browser. Mozemo ga STORATI i u Redux, ali ce biti igubljen nakon svakog refrsha.\r\n    };\r\n    let url =\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCNGQWVK3ukVa8MyhMsvXIdeHg0zRTOq9s\";\r\n    //signup\r\n    if (!isSignUp) {\r\n      //defaultno true\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCNGQWVK3ukVa8MyhMsvXIdeHg0zRTOq9s\";\r\n      //signIn\r\n    }\r\n    axios\r\n      .post(url, authData) //post prima dva argumenta, gdje nesto saljemo i sta saljemo\r\n      .then((response) => {\r\n        //debugger;// ako smo se uspjesno autentifikovali - ulazimo u ovaj blok koda\r\n        console.log(response);\r\n        /*\r\n        response:\r\n        data:\r\n        email: \"a.kdsddd@gmail.com\"\r\n        expiresIn: \"3600\"\r\n        idToken: \"eyJhbGciOiJSUzI1sBZ2FKCokl2ldXrMKOSFhW5fR4eKT5N1g\"  //token\r\n        kind: \"identitytoolkit#SignupNewUserResponse\"\r\n        localId: \"rVWMShbjlbcNm0eBPJBHfqOun9W2\"   //userId --> generated automatically in firebase\r\n        refreshToken: \"AE0u-NdU6ABpe5hT\r\n         */\r\n        //debugger;\r\n\r\n        const expirationDate = new Date( //authCheckState() -->| if (expirationDate <= new Date()) { dispatch logout(). | authCheckState se okida u App.js-u svaki put kada refreshamo nasu stranicu compDidMount()\r\n          new Date().getTime() + response.data.expiresIn * 1000 //3600s = 1 hour => expirationDate je sadasnje vrijme plus sat vremena. Bitno mi je zbog authCheckState-a.\r\n        ); //milisec to sec\r\n        localStorage.setItem(\"token\", response.data.idToken); //ove podatke smo storali u local Storage zboh otpornosti na refreshe\r\n        localStorage.setItem(\"expirationDate\", expirationDate);\r\n        localStorage.setItem(\"userId\", response.data.localId); //treba nam user Id zbog authCheckState i success u njemu koji se okida\r\n        //localStorage: ApplicationTab/Local Storage-(sa lijeve strane)\r\n        dispatch(authSuccess(response.data.idToken, response.data.localId)); //authR.js const authSuccess\r\n        dispatch(checkAuthTimout(response.data.expiresIn)); //automatic calling logout() nakon sat vremena\r\n      })\r\n      .catch((err) => {\r\n        //debugger; ukoliko smo se pokusali Sign Upati sa postojecim mailom - ulazimo u ovaj blok koda\r\n        console.log(\"error authA\");\r\n        /*\r\n        data:\r\n        error: {code: 400, message: \"EMAIL_EXISTS\"}\r\n        */\r\n\r\n        dispatch(authFailed(err.response.data.error)); //Auth.js  {this.props.error.message}\r\n        //debugger;\r\n      });\r\n  };\r\n};\r\n","export const ADD_INGREDIENT = 'ADD_INGREDIENT';\r\nexport const REMOVE_INGREDIENT = 'REMOVE_INGREDIENT';\r\n\r\n//inicijalno setanje ingredientsa sa servera\r\nexport const SET_INGREDIENTS = 'SET_INGREDIENTS';\r\nexport const SET_INGREDIENTS_FAILED = 'SET_INGREDIENTS_FAILED';\r\n\r\n//slanje narudzbe (ingredients, totalPRice, orderData) na server\r\nexport const PURCHASE_BURGER_SUCCESS = 'PURCHASE_BURGER_SUCCESS';\r\nexport const PURCHASE_BURGER_FAIL = 'PURCHASE_BURGER_FAIL';\r\nexport const PURCHASE_BURGER_START = 'PURCHASE_BURGER_START'; // Za setanje Laoding u ContactDAta na true //orderA.js -> nije korsiteno\r\nexport const PURCHASE_INIT  = 'PURCHASE_INIT'; \r\n\r\n//dobijanje ordersa sa servera\r\nexport const FETCH_ORDERS_START = 'FETCH_ORDERS_STARTT';\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_FAIL = 'FETCH_ORDERS_FAIL';\r\n\r\n//submit button u Login Formi \r\nexport const AUTH_START = 'AUTH_START';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_FAIL = 'AUTH_FAIL';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'; \r\n\r\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';\r\n\r\nexport const INGREDIENT_PRICE =\r\n{\r\nmeat : 1,\r\ncheese : 0.5,\r\nbacon : 0.5,\r\nsalad : 0.5\r\n};\r\n\r\nexport const UPDATE_PORUCLJIVO_STATE = 'UPDATE_PORUCLJIVO_STATE';\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport Auxic from \"../../hoc/Auxic/Auxilary\";\r\nimport Burger from \"../../components/Burger/Burger\";\r\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControlls\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport ModalOrderSummary from \"../../components/Burger/ModalOrderSummary/ModalOrderSummary\";\r\nimport axios from \"../../axios-orders\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actionCreators from \"../../store/actions/index\";\r\n//import { Redirect } from 'react-router-dom';\r\n\r\nimport { connect } from \"react-redux\";\r\n//import * as actionTypes from '../../store/actions/actionTypes';\r\n\r\nclass BurgerBuilder extends Component {\r\n  //Stara sintaksa, moze se i ovako state postavljati\r\n  //constructor(props) {\r\n  //  super(props);\r\n  //this.state = {...}\r\n\r\n  //}\r\n\r\n  state = {\r\n    //ingredients: null,\r\n    /*ingredients2: [\r\n      'salad', 'bacon', 'bacon'\r\n    ],*/\r\n    /*ingredients: {\r\n    \r\n    salad:0,\r\n    bacon:0,\r\n    cheese:0,\r\n    meat:0\r\n       \r\n    },*/\r\n    //totalPrice: 2,\r\n    //ingredients i total price su samo prebaceni na redux iz ovog state-a\r\n    //ostali su local UI state i nema potrebe da ih prebacujemo na redux\r\n    porucljivo: false /*Poruci Button */,\r\n    modalVisibility: false, //conditionally displaying modal, Local UI state managment\r\n    /*loading: false, //spinner\r\n    error: false,*/\r\n    //burgerVisibility: true,\r\n  };\r\n\r\n  //sada se logika ovog koda ispod nalazi u burgerBuilderA.js-- u actionCreatoru\r\n\r\n  componentDidMount() {\r\n    //debugger;\r\n    this.props.onInitIngredients();\r\n\r\n    /* axios.get('https://react-moj-hamburger.firebaseio.com/ingredients.json')\r\n    .then(response => {\r\n        this.setState({ingredients: response.data});\r\n       // console.log(response.data);\r\n    })\r\n    .catch(error => {\r\n      this.setState({error: true})\r\n    });*/\r\n  }\r\n\r\n  purchaseButtonEnability() {\r\n    //sumOfOfObjectValues.js\r\n    //zbir value-a od svakog ingredienta da li je > 0 radi order buttona\r\n    const { ings } = this.props; //{bacon: 0, cheese: 0, kecap: 0, meat: 0}\r\n    const sum = Object.keys(ings) //[bacon, cheese, keacap, meat]: Ovo je uradjeno da bi mogao doci do igKeya a to je salad npr. i onda napisati ings[igKey]\r\n      .map((igKey) => {\r\n        return ings[igKey]; //sum = [0, 1, 0, 0, 1]  map pravi novi array na immutable way AllValuesFromObj.js\r\n      })\r\n      .reduce((sum, el) => {\r\n        //0, 1\r\n        return sum + el;\r\n      }, 0);\r\n\r\n    return sum > 0;\r\n    //porucljivo ce postati true ako je suma veca od 0\r\n  }\r\n\r\n  //okida se kada kliknemo na Order Now ili na SignIN/SignUP button ispod BuildControls\r\n  purchaseHandler = () => {\r\n    //orderNow button/SIGN IN SIGN UP button\r\n    if (this.props.isAuth) {\r\n      this.setState({ modalVisibility: true }); //ako smo authenticated: zelimo da vidimo modal, poslije modala da idemo na checkout\r\n    } else {\r\n      this.props.onSetAuthRedirectPathBB(\"/checkoutt\"); //ne mozemo kliknuti na button ako nismo bildali. Zelimo da se autentifikujemo pa da idemo na checkout odmah. A ne da opet idemo nazad na bildanje burgera.\r\n      this.props.history.push(\"/auth\"); //logicno zelimo da se autentifikujemo da bismo mogli poruciti\r\n      //<Redirect to = '/auth'/> ne radi\r\n    }\r\n  };\r\n\r\n  modalCancelHandler = () => {\r\n    this.setState({ modalVisibility: false });\r\n  };\r\n\r\n  modalContinueHandler = () => {\r\n    this.props.onPurchaseInit(); ////setta purchased na false da ne bismo bili onemoguceni da udjemo na checkout\r\n    this.props.history.push({\r\n      pathname: \"/checkoutt\", //baca nas sa Modala na Checkout kada kliknemo Continoue\r\n    });\r\n  };\r\n\r\n  render() {\r\n    //debugger;\r\n    //LessButtonsDisabling.js\r\n    const lessButtonsEnability = {\r\n      ...this.props.ings, //this.state.ingredients\r\n    };\r\n\r\n    for (let key in lessButtonsEnability) {\r\n      lessButtonsEnability[key] = lessButtonsEnability[key] <= 0; //ako je {salad: 0} onda ce biti {salad:true}, bit ce dakle disabled\r\n      //lessButtonsEnability = {salad: false, bacon: true, cheese: true, meat: true}\r\n    }\r\n\r\n    let summary = null;\r\n\r\n    let burger = this.props.error ? (\r\n      <p>Sastojci ne mogu biti učitani!</p>\r\n    ) : (\r\n      <Spinner />\r\n    );\r\n\r\n    if (this.props.ings) {\r\n      //this.state.ingredients\r\n      burger = (\r\n        <Auxic>\r\n          <Burger ingredients={this.props.ings} />\r\n\r\n          <BuildControls\r\n            ingredientAdded={this.props.onAddIngredient} //this.addIngredientHandler --> iz buildControls type stize\r\n            ingredientOduzet={this.props.onRemoveIngredient} //this.removeIngredientHandler --> iz buildControls type stize\r\n            disabled={lessButtonsEnability} //lessButtonsEnability = {salad: false, bacon: true, cheese: true, meat: true}\r\n            price={this.props.totPrice}\r\n            purchaseButtonEnabled={this.purchaseButtonEnability()} //porucljivo je true ili false (0 ings values)  da nema ove () zagrade, ne bi se nikad okinuo\r\n            purchaseHandler={this.purchaseHandler} //odlucujemo gdje cemo nakon sto kliknemo order button => na /auth pa na checkout ili na summaryCheckout(modal)\r\n            isAuth={this.props.isAuth} //Odlucujemo hoce li pisati ORDER NOW ili SIGN UP TO ORDER na buttonu koji je ispod build controls (MAnje, vise)\r\n          />\r\n        </Auxic>\r\n      );\r\n\r\n      summary = ( //summary je modal koji iskoci kada kada bildamo burger i kada smo vec auth\r\n        <ModalOrderSummary\r\n          ingredients={this.props.ings} //this.state.ingredients\r\n          modalCanceledHandler={this.modalCancelHandler} //kada se okine nas state postaje modalVisibility: false i modal bjezi sa ekrana\r\n          modalContinueHandler={this.modalContinueHandler} //kada se okine baca nas sa modala na checkout\r\n          summaryCijena={this.props.totPrice}\r\n        />\r\n      );\r\n    }\r\n\r\n    if (this.state.loading) {\r\n      summary = <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <Auxic>\r\n        <Modal\r\n          show={this.state.modalVisibility} //ako je true, modal ce biti vidljiv\r\n          modalClosed={this.modalCancelHandler}\r\n        >\r\n          {summary /*summary je modal ili spinner, children u modal-u */}\r\n        </Modal>\r\n\r\n        {burger}\r\n      </Auxic>\r\n    );\r\n  }\r\n}\r\n\r\n//1. konfiguracija\r\n//subscription\r\n\r\nconst mapStateToProps = (state) => {\r\n  //debugger;\r\n  return {\r\n    ings: state.burgerBuilderR.ingredients,\r\n    totPrice: state.burgerBuilderR.totalPrice,\r\n    error: state.burgerBuilderR.error,\r\n    isAuth: state.authR.token !== null,\r\n    building: state.burgerBuilderR.building,\r\n  };\r\n};\r\n\r\n//2. konfiguracija\r\n\r\n//Akcije salju podatke na reducer.js\r\n//Salju mu type i ostale propertije(optional)\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //debugger;\r\n  return {\r\n    //returnat cemo JS objekat u kojem mozemo definisati neke prop names\r\n    //koji ce cuvati u sebi reference to a function koja ce biti executana da izvrsi action\r\n    //Mozemo izabraty prop name po zelji\r\n    //sada ovaj prop cuva value, a taj value treba da bude anonymus function\r\n    //ova funkcija ce od sada biti dostupna preko ovog prop name-a: onIncrementCounter\r\n    //Mi sada ovu prop: onIncrementCounter mozemo vezati npr. za onClick() neki. I kada god kliknemo na\r\n    //njega, ova dispatch funkcija ce se okinuti.\r\n    //ovo type imam objasnjeno u redux-basics.js\r\n    //Sa typom sam dobio property increment npr., koji mugu koristiti i usvom containeru\r\n    //Tacnije, to cumoci uraditi kada proslijedim ovu funkciju kao 2. argument u connect\r\n\r\n    /*onIncrementCounter: ()=> dispatch({type: actionTypes.INCREMENT}),\r\n  onDecrementCounter: ()=> dispatch({type: actionTypes.DECREMENT}),\r\n  onSubCounter: ()=> dispatch({type: actionTypes.SUB, val:15}), \r\n  \r\n  //Cesto se koristi payload umjesto ovog val. Mozemo imati koliko god zelim propertya poered typa\r\n  //Ovom valu pristupamo preko action.val u reducer.js-u\r\n  onAddCounter: ()=> dispatch({type: actionTypes.ADD, val: 10}),*/\r\n\r\n    //value u payloadu bi trebala biti trenutna vrijednost Countera\r\n    //payload nismo morali slati jer imamo vec u reduceru state i u njemu counter\r\n    //ovo name se mora slagati sa name-om u reduceru u dijelu vezanom za ovu akciju\r\n\r\n    //name, age, idAAA su isti. Samo sto su age i name stigli iz AddPErson komponente, a idAAA iz ove Persons.js. Oba su ovdje proslijedjena\r\n    //preko funkcija koje se nalaze iznad. Samo su podaci u njima drugacije malo rasporedjeni. name, i age su definisani preko localState-a.\r\n    //Zato sto nisu bili toliko bitni ovdje.\r\n\r\n    //1) addIngredientHandler() i\r\n    //2) removeIngredientHandler() ne postoje vise\r\n\r\n    //onAddIngredient: (name) => dispatch({type:actionTypes.ADD_INGREDIENT, ingredientName: name, val: actionTypes.INGREDIENT_PRICE[name]}), //ovo name iz BuildControls stize, a val iz actions.js\r\n\r\n    //payload mora iamti isto ime u reduceru i u akciji ovdje, val sluzi za updajtovanje cijene\r\n    //onRemoveIngredient: (name) => dispatch({type:actionTypes.REMOVE_INGREDIENT, ingredientName: name, val: actionTypes.INGREDIENT_PRICE[name]}), //ovo name iz BuildControls stize, a val iz actions.js\r\n\r\n    //payload mora iamti isto ime u reduceru i u akciji ovdje\r\n    //onDeleteResult: (idAAA) => dispatch(actionCreators.deleteResult(idAAA))\r\n\r\n    onAddIngredient: (name) => dispatch(actionCreators.addIngredient(name)), //name dolazi iz BuildControls preko ctrl.type\r\n\r\n    onRemoveIngredient: (name) =>\r\n      dispatch(actionCreators.removeIngredient(name)),\r\n\r\n    onInitIngredients: () => dispatch(actionCreators.fetchIngredients()),\r\n\r\n    onPurchaseInit: () => dispatch(actionCreators.purchaseInit()),\r\n\r\n    onSetAuthRedirectPathBB: (path) =>\r\n      dispatch(actionCreators.setAuthRedirectPath(path)), // bitan je zbog redirektanja nakon sto kliknemo na submit u Auth.js. Mozemo ici nazad na burger ili na checkout.\r\n  };\r\n};\r\n\r\n/*const mapDispatchToProps = {\r\n  onAddIngredient: actionCreators.addIngredient,\r\n  onRemoveIngredient: actionCreators.removeIngredient,\r\n  onInitIngredients: actionCreators.fetchIngredients,\r\n  onPurchaseInit: actionCreators.purchaseInit,\r\n  onSetAuthRedirectPathBB: actionCreators.setAuthRedirectPath,\r\n};*/\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(BurgerBuilder, axios)); //axios za withErrorHandler HOC\r\n","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\n//Cilj je dakle da priakzemo preview of our burger i onda da prikazemo continoue or cancel buttons.\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>Nadamo se da ste zadovoljni ukusom!!!</h1>\r\n\r\n      <div style={{ width: \"100%\", height: \"300px\", margin: \"auto\" }}>\r\n        {/*Morali smo mu poslati ingredients jer ih ocekuje u Burger.js-u */}\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n\r\n      {/*Savrsen primjer reusinga jednog buttona */}\r\n      <Button btntype=\"Danger\" clicked={props.CheckoutCancelled}>\r\n        ODUSTANI\r\n      </Button>\r\n      <Button btntype=\"Success\" clicked={props.CheckoutContinued}>\r\n        NASTAVI\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\n//importovan je u Auth.js i ContactData.js\r\n//predstavlja single input, textArea ili select u zavisnosti od elementType-a koji stize preko propsa\r\n\r\nconst input = (props) => {\r\n  /*\r\n  props:{  //iz Auth.jS\r\nchanged: event => this.inputChangedHandler(event, formElement.id)  --> formElement.id --> mail ili password\r\nelementConfig: {type: \"email\", placeholder: \"Mail Adresa\"}\r\nelementType: \"input\"\r\ninvalid: true\r\nshouldValidate: {required: true}\r\ntouched: false\r\nvalue: \"\"\r\n  }\r\n*/\r\n\r\n  let inputElement = null;\r\n  //<input type=\"text\" name=\"fname\" placeholder=\"First name\">\r\n\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n  //debugger;\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      //debugger;\r\n      break;\r\n\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n\r\n    /*<select name=\"carlist\" form=\"carform\">\r\n    <option value=\"volvo\">Volvo</option>\r\n    <option value=\"saab\">Saab</option>\r\n    </select> */\r\n\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\n//import axios from '../../../axios-orders';\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreators from \"../../../store/actions/index\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    //JS objekat\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Tvoje ime\",\r\n        },\r\n        value: \"\", //formData = {name: name.value, street: street.value, zipCode: \"12345\", country: \"BiH\", email: \"df\"}\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Ulica\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Poštanski broj\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Država\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \" E-mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Najbrža\" },\r\n            { value: \"cheapest\", displayValue: \"Najjeftinija\" },\r\n          ],\r\n        },\r\n        //ova je samo defaultna, dok je nije bilo ako ne odaberemo nista\r\n        //na server se ne posalje nista\r\n        value: \"fastest\",\r\n        //morali smo dodati prazan validation, jer bez njega bude erroe kada odaberemo neku opciju\r\n        validation: {},\r\n        valid: true,\r\n        //ovdje nismo dodali validaciju jer svakko moramo nesto izabrati\r\n      },\r\n    },\r\n    //loading:false,  sada je preko Reduxa\r\n    formIsValid: false, //button order ce biti disabled ako je neki input field invalid\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    //ingredients nemam ovdje, ali ih imam u checkoutu. Preko rute od tamo su prsit\r\n    //contact data a nemam state za njih\r\n    //total price\r\n\r\n    event.preventDefault();\r\n\r\n    //KAo sto i samo ime govori, formData su uneseni podaci iz forme, a koje smo dobili preko value-a\r\n\r\n    const formData = {}; //formData = {name: name.value, street: street.value, zipCode: \"12345\", country: \"BiH\", email: \"df\"}\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      //debugger;\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n\r\n      console.log(\"formData\" + formData);\r\n      //bukvalno cemo u formData imati key value pairs. for (let formElementIdentifier in this.state.orderForm). formElementIdentifier je bitan.\r\n      //Pomocu njega u novoformirani objekat formData ubacimo keyeve iz state-a.\r\n\r\n      //console.log('formElementIdentifier '+formElementIdentifier);  name, street, zipCode, mail, deliveryMEthod...\r\n\r\n      /*//ove ce ustvari biti poslano na Firebase\r\n country: \"kkk\"\r\ndeliveryMethod: \"kk\"\r\nemail: \"\"\r\nname: \"\"\r\nstreet: \"\"\r\nzipCode: \"\"\r\n*/\r\n    }\r\n\r\n    //this.setState({loading:true})\r\n\r\n    const narudzba = {\r\n      //Poslano sa Checkout.js-a --- sada je sa reduxa\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId, //saljemo na server da bismo poslije mogli prikazati useru samo njegove narudzbe\r\n    };\r\n\r\n    this.props.onOrderBurger(narudzba, this.props.token);\r\n\r\n    /*axios.post( '/orders.json', narudzba )\r\n.then(response => {\r\nthis.setState({loading:false});\r\n//withRouter\r\nthis.props.history.push('/');\r\n\r\n})\r\n.catch(error => {\r\n  this.setState({loading:false});\r\n  });*/\r\n  };\r\n\r\n  //value i rules su poslani iz funkcije inputChangedHandler:\r\n  //updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation );\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n    //morao sam settati na true jer ne bi proslo ovu prvu\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n      //isValid ce postati true ako trimmied value nije jednaka praznom stringu\r\n      //trim() uklanja white spaces na pocetku i na kraju\r\n      //isValid vraca true ili false\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n      const pattern = /^\\d+$/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    //Naravno, nije bio dovoljan samo event jer imamo vise elemenata koji sadrze value pa smo morali\r\n    //proslijediti i ovaj inputIdentifier  da znamo u koji value tacno da upisemo nesto\r\n\r\n    //console.log(event.target.value);\r\n\r\n    const updatedOrderForm = {\r\n      //na ovaj nacin smo klonirali samo deliveryMethod, country, email, name, street  npr. ali ne i ostale nested podatke\r\n      //moramo deeply klonirati da ne bismo samo referencirali na nested podatke\r\n      //ukoliko to ne uradimo, samo cemo kopitrati pointere na nested data\r\n\r\n      ...this.state.orderForm,\r\n    };\r\n    //console.log(updatedOrderForm);\r\n\r\n    //deeply kloniranje\r\n\r\n    const updatedFormElement = {\r\n      ...updatedOrderForm[inputIdentifier],\r\n      //sada mozemo safely promjeniti vrijednost od updatedOrderForm\r\n      //elemntConfig nije zahvacen  na ovaj nacin, ali nam on i ne treba\r\n      //da je trebao samo bi napravili jos jedan blok ovog kloniranja\r\n      //elementType, value\r\n    };\r\n    //console.log(updatedFormElement);\r\n    //console.log(updatedFormElement.value);\r\n\r\n    updatedFormElement.value = event.target.value;\r\n\r\n    //validity, koristili smo element zato da mozemo sici da dohvatimo podatke\r\n    updatedFormElement.valid = this.checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.touched = true;\r\n\r\n    //elementType, value              = elementType, value: nova vrijednost, linija 133\r\n    //posto ja zelim citavu formu zamjeniti, a ne samo element\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    //console.log(updatedFormElement);\r\n\r\n    //da li je citava forma validna\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      //inputIdentifier: name, street, zipcode, country\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid; //updatedOrderForm[inputIdentifier]: elementConfig, elmentType, value, validation\r\n      //da bismo izbjegli zamku gdje se samo zadnji pika, mi smo dodali && formIsValid i setali ga inicijalno na true\r\n      //a u state-u na false\r\n    }\r\n    //console.log(formIsValid);\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    // Moramo objeakt iz state-a pretvoriti u array da bi smo mogli loopati kroz njega\r\n    //naravno napravili smo prazan array\r\n    const formElementsArray = [];\r\n\r\n    for (let key in this.state.orderForm) {\r\n      //key je street, name, mail...\r\n      formElementsArray.push({\r\n        //novi objekat cemo pushati, ne stari\r\n        id: key,\r\n        //elementConfig: key.elementConfig,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            //posaljemo invalid samo ako je true\r\n            invalid={!formElement.config.valid}\r\n            //Ako nije settana validacija shouldValidate ce biti false /rules\r\n            shouldValidate={formElement.config.validation}\r\n            //shouldValidate varaca true ili false u zavisnosti da li je postavljen validation\r\n            //za dropDown on nije postavljen\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n\r\n        <Button btntype=\"Success\" disabled={!this.state.formIsValid}>\r\n          Poruči\r\n        </Button>\r\n      </form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Unesite Vaše podatke</h4>\r\n\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//1. konfiguracija\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilderR.ingredients,\r\n    price: state.burgerBuilderR.totalPrice,\r\n    loading: state.orderR.loading,\r\n    token: state.authR.token,\r\n    userId: state.authR.userId, //ovdje preuzmemo userID sa authR-a, saljemo preko akcije onOrderBurger na server da bismo poslije mogli\r\n    //prikazati useru samo njegove narudzbe\r\n  };\r\n};\r\n\r\n//2. konfiguracija\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actionCreators.purchaseBurger(orderData, token)), //orderData ings, formData, price, usrID - auth\r\n  };\r\n};\r\n\r\n//157 --> withRouter\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ContactData));\r\n\r\n/*\r\nOvdje se vidi smisao REDUX-a. \r\nings i totalPrice mi treabaju i u BurgerBuilder-u i u ContactData.js i u Checkout.js \r\n\r\nSada su oni dostupni bez vecih problema zato sto se nalaze u REDUX-u\r\n\r\ntip: \r\ninhs i totalPrice mi trebaju i u ContactData.js-u zato sto od tamo saljem naraudzbu plus ContactData \r\n*/\r\n","import React, { Component } from \"react\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { connect } from \"react-redux\";\r\n//import * as actionCreatorsOrdersA from '../../store/actions/index';\r\n\r\nclass Checkout extends Component {\r\n  /*state = {\r\n\r\n    ingredients: null,\r\n    totalPrice:null\r\n\r\n}\r\n*/\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  CheckoutCancelledHandler = () => {\r\n    //button u CheckoutSummary za otkazivanje narudjbe, vraca nas na BurgerBuilder.js\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    //debugger;\r\n    console.log(\"scrollToBottom\");\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  CheckoutContinuedHandler = () => {\r\n    //button u CheckoutSummary za nastavak narudjbe, ucitava contactData\r\n    //this.scrollToBottom();\r\n    this.props.history.push(\"/checkoutt/contact-data\");\r\n\r\n    //debugger;\r\n  };\r\n\r\n  render() {\r\n    let summary = null;\r\n\r\n    if (this.props.ings) {\r\n      //bit ce reelevantno samo ako su nam stigli ovi propsovi\r\n\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n\r\n          <CheckoutSummary\r\n            //CheckoutSummary je burger i ispod njega dva buttona za continoue i cancel\r\n            ingredients={this.props.ings /*this.state.ingredients*/}\r\n            CheckoutCancelled={this.CheckoutCancelledHandler}\r\n            CheckoutContinued={this.CheckoutContinuedHandler}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {summary}\r\n\r\n        <Route\r\n          path={this.props.match.path + \"/contact-data\"}\r\n          //nested routing\r\n          //this.props.match.path --> ne bismo mogli korsitiit da BurgeBuilder nije ucitan preko rute u App.js-u\r\n\r\n          //Ne moramo vise korsititi withRouter nakon dodavanja Reduxa u ContactData.js\r\n          //render = {() => (<ContactData ingredients = {this.state.ingredients} totalPrice = {this.state.totalPrice}/>)} />\r\n          //vise ne moramo koristit trik iznad za slanje ingredienta i price-a u ContactData. Dobar primjer korsiti Reduxa\r\n          component={ContactData}\r\n        />\r\n        <div\r\n          style={{ float: \"left\", clear: \"both\" }}\r\n          ref={(el) => {\r\n            this.messagesEnd = el;\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//1. konfiguracija, subscription\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilderR.ingredients,\r\n    //price: state.totalPrice\r\n    purchased: state.orderR.purchased, //rediraktanje na homePage ako je narudzba uspjesno otisla na server\r\n  };\r\n};\r\n\r\n//Evo primjera kada imamo samo 1. konfiguraciju. Kada nam akcije nisu potrebne.\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from \"react\";\r\nimport classes from \"./Order.module.css\";\r\n\r\nconst Order = (props) => {\r\n  //transformisanje objekta ingredients u array\r\n  //mogli smo korsititi istu logiku kau u Burger.js-u\r\n  //Ali cemo raditi alternativni nacin\r\n\r\n  const ingredients = [];\r\n  //console.log(ingredients);    //[{name: bacon, value: 0}, {name:cheese,  value:0}, {name: meat, value: 1}, {name:salad,  value:0}], {sve naruddzbe tako}]\r\n  //debugger;\r\n  for (let ingredientName in props.ingredients) {\r\n    //debugger;\r\n    //console.log(props.ingredients);\r\n    //{bacon: 0, cheese: 0, meat: 0, salad: 1}...\r\n    //console.log('props.ingredients[ingredientName]: ' + props.ingredients[ingredientName]);\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      value: props.ingredients[ingredientName],\r\n    });\r\n    //props.ingredients[ingredientName]   value: 1 2 ili 3 itd\r\n    //console.log('props.ingredients[ingredientName]: ' + props.ingredients[ingredientName]);\r\n    //{bacon: 1, cheese: 0, meat: 0, salad: 1}\r\n    //console.log('ingredients: ' + ingredients);\r\n  }\r\n\r\n  //console.log(props);\r\n\r\n  const ingredientOutput = ingredients.map((ig) => {\r\n    return (\r\n      <span\r\n        className={classes.IngredientOutput}\r\n        style={\r\n          {\r\n            /*textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 8px\",\r\n          border: \"1px solid #ccc\",\r\n          padding: \"5px\",*/\r\n          }\r\n        }\r\n        key={ig.name}\r\n      >\r\n        <strong>\r\n          {ig.name} ({ig.value})\r\n        </strong>\r\n      </span>\r\n    );\r\n    /*\r\n      0: {name: \"bacon\", value: 1}\r\n      1: {name: \"cheese\", value: 1}\r\n      */\r\n  });\r\n\r\n  //const customerOutput =\r\n\r\n  return (\r\n    //dole u divu zelimo outputsti dakle ingredients i total price\r\n    //A ingredients iz Checkouta koliko se sjecam\r\n\r\n    //Ovaj fajl Order je kako treba da izgleda jedan single Order\r\n    //A tamo u Orders definisemo ih onoliko koliko ih treba\r\n\r\n    <div className={classes.Order}>\r\n      <p>\r\n        <span className={classes.IngredintsPadding}>Ingredients:</span>{\" \"}\r\n        {ingredientOutput}\r\n      </p>\r\n      <p>\r\n        Price: <strong>{props.price.toFixed(2)} KM</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n","import React, { Component } from \"react\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreators from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n//import axios from '../../axios-orders';\r\n//import withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\n\r\nclass Orders extends Component {\r\n  //sada je preko reduxa\r\n  /*state = {\r\n    orders: [],\r\n    loading:true\r\n\r\n}*/\r\n\r\n  //fetching orders from server\r\n  componentDidMount() {\r\n    //debugger;\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n\r\n    //axios-orders.js --> base url\r\n\r\n    /* axios.get('/orders.json')\r\n    .then(response => {\r\n\r\n    //vrati nam sirovi objekat u kojem imamo keyeve i values\r\n    //keyevi su jedinstvena imena koja je efirebase generisao\r\n    // a values su customer, ingredients itd... \r\n    //moramo ga pretvoriti u array:\r\n/*\r\n{-Lu8OsGMNBtq4mnkYrCD: {…},\r\n -Lu8Ow_zsEDS7Aoipy4d: {…},\r\n  -Lu8pT0ic6AEW9deZY8d: {…},\r\n  -LuXVqMVA_WI7wxMj4NS: {…},\r\n   -LuXYY3G-i-0-IRZHVCw: {…}, …}\r\n\r\n*/\r\n    //u konzoli vidimo objekat\r\n    /*console.log( response.data);\r\n\r\n\r\n\r\n\r\n    const fetchedOrders = [];\r\n\r\n    for (let key in response.data) {\r\n        fetchedOrders.push({\r\n            //novi objekat cemo pushati, ne stari\r\n            ...response.data[key],\r\n            id:key*/\r\n    //sada imamo array pun order objekata koji imaju i svoje id-eve\r\n    //key: -Lu8OsGMNBtq4mnkYrCD ime objekta\r\n    //...response.data[key]: ingredients, orderData,  price\r\n    //key lijevo, data[key] desni podaci\r\n\r\n    //  });\r\n    // console.log('response.data: ' + response.data);\r\n    // u konzoli vidimo array\r\n    //console.log('response.data[key]: ' + response.data[key]); ---\r\n    //console.log('key: ' + key);\r\n    //console.log('fetchedOrders: ' + fetchedOrders); ---\r\n    //}\r\n    /*\r\n   \r\n        this.setState({loading: false,  orders: fetchedOrders});\r\n        //console.log(this.state.orders);\r\n    })\r\n    .catch(err => {\r\n        this.setState({loading: false});\r\n    })*/\r\n  }\r\n  //Outputting orders\r\n\r\n  render() {\r\n    let orders = <Spinner />;\r\n\r\n    //debugger;\r\n\r\n    if (!this.props.loading) {\r\n      //debugger;\r\n      orders = this.props.orders.map((order) => (\r\n        <Order\r\n          key={order.id}\r\n          ingredients={order.ingredients}\r\n          /*to fixed() nije radilo dok nisam dodao ovaj plus koji ga pretvara u number */\r\n          price={+order.price}\r\n        />\r\n      ));\r\n      //debugger;\r\n    }\r\n\r\n    return <div>{orders}</div>;\r\n  }\r\n}\r\n\r\n//1. konfiguracija\r\n\r\nconst mapStateToProps = (state) => {\r\n  //debugger;\r\n  return {\r\n    loading: state.orderR.loading,\r\n    orders: state.orderR.orders, //[{id: \"-MCqw5i8QspVXsWqlsmz\", ingredients: {bacon: 1, cheese: 1, kecap: 0, meat: 0, salad: 1}, orderData: {country: \"bih\", deliveryMethod: \"fastest\", email: \"a.k@gmail.com\", name: \"f\", street: \"f\", …}, price: 3.5, userId: \"dSfmP8KgsnVhS9ZNQ1lyT5EM5d73\"}]\r\n    token: state.authR.token, //authSuccess u authR.js-u\r\n    userId: state.authR.userId, //authSuccess u authR.js-u\r\n  };\r\n};\r\n\r\n//2. konfiguracija\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //debugger;\r\n  return {\r\n    onFetchOrders: (token, userId) =>\r\n      dispatch(actionCreators.fetchOrders(token, userId)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);\r\n","import React, { Component } from \"react\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actionCreatorsAuth from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Adresa\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          //rules for validation\r\n          required: true,\r\n          //isEmail: true, //ako bude errora neplanskih do njega je\r\n        },\r\n        valid: false,\r\n        touched: false, //onChange() postaje true\r\n      },\r\n\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Šifra\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          //rules for validation\r\n          required: true,\r\n          isEmail: true, //ako bude errora neplanskih do njega je\r\n          minLength: 6, // na firebase-u je minimum 6 karaktera\r\n        },\r\n        valid: false,\r\n        touched: false, //kada god se okine inputChangedHandler touched ce biti true\r\n      },\r\n    },\r\n    isSignUp: true, //actionCreatorsAuth.auth(email, password, isSignUp)\r\n  };\r\n  //pomocu ovog ispod resetamo path/url svaki put kada dodjemo do auth page a da nismo nabildali burger prethodno\r\n  componentDidMount() {\r\n    //debugger;\r\n    if (!this.props.building && this.props.authRedirectPath !== \"/\") {\r\n      debugger;\r\n      //Ako dodjemo do Auth.js-a da nismo prethodno buildali Burger. Ovo je bitno ako smo buldali burger, pa se odjavili. Ako dodjemo na Auth.js bacit ce nas na checkut.js\r\n      this.props.onSetAuthRedirectPath(\"/\"); // ukoliko nismo prethodno nabildali nas burger, nakon klika na submit u Auth.js zelimo da idemo na nazad na burger.\r\n    }\r\n  }\r\n\r\n  checkValidity(value, rules) {\r\n    //debugger;\r\n    let isValid = true;\r\n    //morao sam settati na true jer ne bi proslo ovu prvu\r\n\r\n    if (rules.required) {\r\n      //debugger;\r\n      isValid = value.trim() !== \"\" && isValid;\r\n      //isValid ce postati true ako trimmied value nije jednaka praznom stringu\r\n      //trim() uklanja white spaces na pocetku i na kraju\r\n      //isValid vraca true ili false\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n      const pattern = /^\\d+$/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    return isValid; //true ili false\r\n  }\r\n\r\n  //inputChangedHandler malo drugaciji od onog u ContactData.js kontejneru\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    //inputChangedHandler(event, formElement.id)\r\n    //debugger;\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: this.checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true, //kada god se okine inputChangedHandler touched ce biti true\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault(); //prevent reloading page\r\n\r\n    this.props.onAuth(\r\n      this.state.controls.email.value, //email\r\n      this.state.controls.password.value, //password\r\n      this.state.isSignUp //bitan nam je zbog urla-a u  AuthA.js (auth action) koji moze biti SIGNIN ili SIGNUP i dole sta ce pisati na buttonu\r\n    );\r\n    //debugger;\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // Moramo objeakt iz state-a pretvoriti u array da bi smo mogli loopati kroz njega\r\n    //naravno napravili smo prazan array\r\n    //debugger;\r\n    const formElementsArray = []; //[{config: {elementType: \"input\", elementConfig: {…}, value: \"\", validation: {…}, valid: false, …} id: \"email\"}, {noviObj}]\r\n    //debugger;\r\n    for (let key in this.state.controls) {\r\n      //debugger;\r\n      //key je email, password, ...\r\n      formElementsArray.push({\r\n        //novi objekat cemo pushati, ne stari\r\n        id: key,\r\n        //elementConfig: key.elementConfig,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id} //iz ovog gore arraya iznad\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        //posaljemo invalid samo ako je true\r\n        invalid={!formElement.config.valid}\r\n        //Ako nije settana validacija shouldValidate ce biti false /rules\r\n        shouldValidate={formElement.config.validation}\r\n        //shouldValidate varaca true ili false u zavisnosti da li je postavljen validation\r\n        //za dropDown on nije postavljen\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let authRedirect = null;\r\n\r\n    if (this.props.isAuth) {\r\n      //ukoliko smo se ulogovali, idemo na '/checkout' ili '/'. u zavisnosti da li smo vec bili ulogovani ili\r\n      // smo prvo bildali nasu aplikaciju pa se onda ulogovali\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p style={{ color: \"red\" }}>{this.props.error.message}</p>;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {errorMessage}\r\n        {authRedirect}\r\n\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btntype=\"Success\">SUBMIT</Button>\r\n        </form>\r\n\r\n        <Button clicked={this.switchAuthModeHandler} btntype=\"Danger\">\r\n          SWITCH TO {this.state.isSignUp ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  //debugger;\r\n  return {\r\n    loading: state.authR.loading, //if (this.props.loading) { form = Spinner }\r\n    error: state.authR.error,\r\n    isAuth: state.authR.token !== null, //ukolikoje isAuth: true, idemo na '/checkout' ili '/'. u zavisnosti da li smo vec bili ulogovani ili smo prvo bildali nasu aplikaciju pa se onda ulogovali\r\n    building: state.burgerBuilderR.building,\r\n    authRedirectPath: state.authR.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDipatchToProps = (dispatch) => {\r\n  //debugger;\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actionCreatorsAuth.auth(email, password, isSignUp)), // nas actionCreator auth ocekuje tri argumenta\r\n    onSetAuthRedirectPath: (path) =>\r\n      dispatch(actionCreatorsAuth.setAuthRedirectPath(path)),\r\n\r\n    //onAuth zelimo da okinemo kada god kliknemo na button submit\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDipatchToProps)(Auth);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionCreators from \"../../../store/actions/index\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Logout extends Component {\r\n  //Ako user klikne na LogOut button u NAvigationITems, bit cemo baceni na ovu komponenetu koja ce nas odlogovati i vratiti na pocetnu\r\n  componentDidMount() {\r\n    debugger;\r\n    this.props.onLogout(); //mogao sam ovdje poslati (this.props.history) i imao ih push opciju\r\n    debugger;\r\n  }\r\n\r\n  render() {\r\n    debugger;\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //debugger;\r\n  return {\r\n    onLogout: () => dispatch(actionCreators.logout()),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);\r\n","import React, { Component } from \"react\";\n\nimport Layout from \"./hoc/Layout/Layout\";\n\nimport Hamburger from \"./containers/BurgerBuilder/BurgerBuilder\";\n\nimport Checkout from \"./containers/Checkout/Checkout\";\n\nimport { Route, Switch, withRouter, Redirect } from \"react-router-dom\";\n\nimport Orders from \"./containers/Orders/Orders\";\n\nimport Auth from \"./containers/Auth/Auth\";\n\nimport Logout from \"./containers/Auth/Logout/Logout\";\n\nimport { connect } from \"react-redux\";\nimport * as actionCreators from \"./store/actions/index\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onTryAutoSignUp();\n  }\n\n  render() {\n    //razdvojili smo rute tako da ne mozemo manuelno uci u /orderss. Ovako ako nismo Auth a unesemo\n    // /orderss u url, budemo vraceni na pocetnu.\n    //A svakako ne mozemo kliknuti na ORDERS button jer je sakriven u NavigaionItems.js\n    let routes = (\n      <Switch>\n        <Route path=\"/auth\" component={Auth} />\n        <Route path=\"/\" exact component={Hamburger} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n\n    if (this.props.isAuth) {\n      routes = (\n        <Switch>\n          <Route path=\"/checkoutt\" component={Checkout} />\n          <Route path=\"/auth\" component={Auth} />\n          <Route path=\"/orderss\" component={Orders} />\n          <Route path=\"/logout\" component={Logout} />\n          <Route path=\"/\" exact component={Hamburger} />\n          <Redirect to=\"/\" />\n        </Switch>\n      );\n    }\n\n    return (\n      /*  Switch se korsti da nam ne bi ucitalo vise ruta odjednom nego samo jednu, i to onu ciji put\n    bude odgovarao. U Switchu je order ruta jako bitan. / uvijek treba biti zadnja.  \n    KAda imamo switch poredak je jako bitan. I exact je moguce rjesenje ako ne zelimo korstiti switch\n    Ako zelimo vise komponenti odjednom, onda moramo korsitiiti nested-routin g. \n    Nested Routing sluzi da bismo mogli ucitati nekoliko stvari odjednom: Checkot.js */\n\n      <div>\n        <Layout>\n          {/*NAmjerno smo stavili da se ne zatvara sama jer je ideja iza cijelog Layouta da mozemo wrapati drugu komponentu sa njim */}\n\n          {routes}\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.authR.token !== null,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTryAutoSignUp: () => dispatch(actionCreators.authCheckState()),\n    //onTryAutoSignUp u App.js-u zato sto je ona nasa rootComponent i uvijek se okida bez obzira koju komp posjetimo\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n//moze se desiti ponekad da imamo error zato smo oblozili componentu sa connectom\n//to rijesimo tako sto oblozimo connect sa withrouterom\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  //najvise komunicira sa ContactData.js i Orders.js ali i saBurgerBuilder.js npr. purchased setanje na false\r\n  orders: [], //\r\n  loading: false, //prikazujemo spinner umjesto forme u ContactData ako je true, i u Orders.js za fetchanje dosadasnjih naruddzbi\r\n  purchased: false, //redirektanje sa checkouta na pocetnu kada se narudzba uspjesno izporuci na server\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  //debugger;\r\n  switch (action.type) {\r\n    //Proces Porucivanja (kad narudzbe saljemo na server)**********************************************************************************\r\n\r\n    case actionTypes.PURCHASE_BURGER_START:\r\n      //debugger;\r\n      return {\r\n        ...state,\r\n        loading: true, //setamo loading na true i prikazujemo spinner umjesto forme u ContactData\r\n      };\r\n\r\n    case actionTypes.PURCHASE_BURGER_SUCCESS:\r\n      //debugger;\r\n      const newOrder = {\r\n        ...action.orderData,\r\n        id: action.orderID, // zelimo unutar jednog objekta imati orderID i orderData merganje\r\n        /*\r\n        newOrder: {\r\n        id: \"-MCgKnpzYqMg0DPHdDQ_\"  //orderID stigne sa servera preko responsa purchaseBurger() akcija iz orderA.js\r\n        ingredients: {bacon: 1, cheese: 1, kecap: 0, meat: 1, salad: 1}\r\n        orderData - formData: {country: \"d\", deliveryMethod: \"fastest\", email: \"a.kWW@gmail.com\", name: \"d\", street: \"d\", …}\r\n        price: 4.5\r\n        userId: \"gbAXYe9qNEOmHoPI0ePSI1Ia9tF2\"\r\n        }\r\n        */\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        loading: false, //setamo laoding na false jer smo uspjesno poslali narudzbu na server\r\n        purchased: true, //redirektanje sa checkouta na pocetnu kada se narudzba uspjesno izporuci na server\r\n        orders: state.orders.concat(newOrder), //concat vraca novi array i zato smo ovo dodali immutably\r\n\r\n        /*\r\nconcat vraca novi array koji je stari array plus argument koji dodamo u concat,\r\nconcat je immutable way updajtovanja arraya by adding an item.\r\n* push manipulira sa originalnim value-om, sa pushom bismo dirali originalne results propertije u originalnom state-u cak i sa \r\nspread operatorima. Push se ne preporucuje u ovim slucajevima nikako.\r\n\r\n\r\n*/\r\n      };\r\n\r\n    case actionTypes.PURCHASE_BURGER_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n\r\n    case actionTypes.PURCHASE_INIT: //vraca purchased na false, da ne bismo bili onemoguceni da udjemo na checkout nakon jedne uspjesne narudzbe\r\n      return {\r\n        //okida se u porucivanjeContinueHandler() u burgerBuilderR tik prije bacanja sa modala na checkout ----> this.props.onPurchaseInit();\r\n        ...state,\r\n        purchased: false,\r\n      };\r\n    //Proces Porucivanja (kad narudzbe saljemo na server)**********************************************************************************\r\n\r\n    //Proces povlacenja svih ordersa sa backenda  (kad narudzbe dolaze sa servera)********************************************************************\r\n\r\n    case actionTypes.FETCH_ORDERS_START:\r\n      //debugger;\r\n      return {\r\n        ...state,\r\n        loading: true, //reusing propertija za spinner, korsiten je u gornjem u bolum u akciji\r\n      }; //koristimo ga u Orders.js kada idemo na server po narudzbe\r\n\r\n    case actionTypes.FETCH_ORDERS_SUCCESS:\r\n      //debugger;\r\n      return {\r\n        ...state,\r\n        loading: false, //setamo loading na false jer smo uspjesno dohvatili orderse sa servera\r\n        orders: action.orders, //action.orders dolazi iz actionCreatora orderR.js: fetchOrdersSuccess\r\n        //action.orders su vec tamo transformisani i u formi su: Array of obejcts [{id, ings, price...},{...}]\r\n      };\r\n\r\n    case actionTypes.FETCH_ORDERS_FAIL:\r\n      //debugger;\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n\r\n    //Proces povlacenja svih ordersa sa backenda (kad narudzbe dolaze sa servera)**********************************************************************************\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  ingredients: null,\r\n  totalPrice: 2,\r\n  error: false,\r\n  building: false, //setat cemo je na true kada kod add-amo ili remove-amo neki ingredient. Bitna zbog redirekta nakon sto skliknemo na submit u Auth.js-u. Ako je building false, idemo nazad na BurgerBuiklder.js\r\n}; //nalazi se u BurgerBuilder.js-u u mapStateToProps-u\r\n\r\n/*\r\nSince reducers are pure functions they do not mutate the original state.\r\n Instead, they return the updated state in a new object. */\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_INGREDIENT:\r\n      //ne trebamo break statements jer svakako imamo return za svaki case tako da se implementacija koda nece nastaviti dalje.\r\n      //debugger;\r\n      return {\r\n        ...state,\r\n        ingredients: {\r\n          ...state.ingredients, //arguments on the right side, override arguments on the left side\r\n          //salad           :    //broj od starog ingredienta npr. 1   +1\r\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\r\n          //overriding: sa ovim iznad smo overridali kopiju objekta: ...state.ingredients\r\n        },\r\n        totalPrice: state.totalPrice + action.val, //burgerBuilderA.js --> action.val\r\n        building: true,\r\n        //porucljivo: sum > 0\r\n      };\r\n\r\n    //  ne trebamo break statements jer svakako imamo return za svaki case tako da se implementacija koda nece nastaviti dalje.\r\n\r\n    case actionTypes.REMOVE_INGREDIENT:\r\n      return {\r\n        ...state,\r\n        ingredients: {\r\n          ...state.ingredients,\r\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\r\n        },\r\n        totalPrice: state.totalPrice - action.val,\r\n        building: true,\r\n      };\r\n\r\n    case actionTypes.SET_INGREDIENTS:\r\n      //mozemo ga koristiti da resetujemo nas burger\r\n      //postavlja ingredinetse inicijalno sa servera, dakle sve na 0\r\n      //odredjuje kakav ce biti poredak u ingredientsima kad ih bildamo poslije\r\n      //burgerBuilderA: fetchIngredients\r\n      return {\r\n        ...state,\r\n        //ingredients: action.ingredients,//ingredients poticu iz burgerBuilderA setIngredients, mijenjamo poredak ingsa\r\n        ingredients: {\r\n          //ovdjeee\r\n          kecap: action.ingredients.kecap,\r\n          salad: action.ingredients.salad,\r\n          bacon: action.ingredients.bacon,\r\n          cheese: action.ingredients.cheese,\r\n          meat: action.ingredients.meat,\r\n        },\r\n        error: false,\r\n        totalPrice: 2, //nakon sto porucimo uspjesno burger, i budemo redirektani na homePage, zelimo da se i nasa cijena vrati na 2\r\n        building: false, //building postaje false i postat ce true ako opet budemo buildali nas burger\r\n      };\r\n\r\n    case actionTypes.SET_INGREDIENTS_FAILED:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n      };\r\n\r\n    //Ako nije postavljen state ni preko jednog od ovih case-ova iznad. Onda ovaj stet ispod vraca initial state\r\n    //ili onaj koji je bio i prije\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../utility\"; //sluzi nam za updajtovanje old-state-a\r\n\r\nconst initialState = {\r\n  token: null, //idToken: \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjYzZTllYThmNzNkZWExMTRkZWI5YTY0OTcx  authA.js response.data\r\n  userId: null, //localId: \"La3z501q7MS6rlZ0BZCSit3I4ui1\"\r\n  error: null, //authFail action\r\n  loading: false,\r\n  authRedirectPath: \"/\", //on odlucuje gdje cemo nakon USPJESNOG auth-a: na BB ili na Checkout.js. MapStateToProps(Auth.js)\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n  return updateObject(state, { error: null, loading: true });\r\n  //updateObjecktu prosljedjujem oldState, i dio state koji zelim da updajtujem\r\n  //ono sto je zanimljivo je da updateObject() nece uduplati npr. loading nego ce overridati isti\r\n};\r\n\r\nconst authSuccess = (state, action) => {\r\n  return updateObject(state, {\r\n    token: action.idToken, //idToken: \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjYzZTllYThmNzNkZWExMTRkZWI5YTY0OTcx  authA.js response.data\r\n    userId: action.userId, //localId: \"La3z501q7MS6rlZ0BZCSit3I4ui1\"\r\n    error: null,\r\n    loading: false, //because we are done\r\n  });\r\n};\r\n\r\nconst authFail = (state, action) => {\r\n  return updateObject(state, {\r\n    error: action.error, //{code:400,message:'EMAIL_EXIST…nvalid'}]}\r\n    loading: false,\r\n  });\r\n};\r\n\r\n//nakon sat vremena token ce opet biti null i userId\r\nconst authLogout = (state, action) => {\r\n  //debugger;\r\n  return updateObject(state, { token: null, userId: null });\r\n};\r\n\r\nconst setAuthRedirectPath = (state, action) => {\r\n  //pristize iz BB kada se klikne na purchaseHandler(Button) i Auth.js-compDidMount()\r\n  return updateObject(state, { authRedirectPath: action.path });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.AUTH_START:\r\n      /*newPArt */ return authStart(state, action);\r\n    // return updateObject(state, {error: null, loading:true});      //utility\r\n\r\n    case actionTypes.AUTH_SUCCESS:\r\n      return authSuccess(state, action);\r\n\r\n    case actionTypes.AUTH_FAIL:\r\n      return authFail(state, action);\r\n\r\n    case actionTypes.AUTH_LOGOUT:\r\n      return authLogout(state, action);\r\n\r\n    case actionTypes.SET_AUTH_REDIRECT_PATH:\r\n      //pristize iz BB kada se klikne na purchaseHandler(Button) i Auth.js-compDidMount()\r\n      return setAuthRedirectPath(state, action);\r\n\r\n    default:\r\n      ////debugger; dokaz da jedna akcija ide na sve reducere\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { createStore, combineReducers, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\n//import rootReducer from './store/reducers/burgerBuiilderR';\nimport thunk from \"redux-thunk\";\nimport { applyMiddleware } from \"redux\";\nimport orderR from \"./store/reducers/orderR\";\nimport burgerBuilderR from \"./store/reducers/burgerBuiilderR\";\nimport authR from \"./store/reducers/authR\";\n\n//Preko ovoga mergamo dva reducera u jedan:\nconst rootReducer = combineReducers({\n  orderR: orderR,\n  burgerBuilderR: burgerBuilderR,\n  authR: authR,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; //ReduxDevTools -> analiza STORE-a\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(\n      thunk\n    ) /*,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/\n  )\n);\n\n//thunk je middleware koji nam omogucava da koristimo asinq kod u actioncreatorima\n\n//Provider je helper component koja nam omogucava da injectamo nas store u React componente\n//Sa providerom konektujemo store koji je kreiran od REACT-a sa sa nasom react aplikacijom.\n//Da bismo povezali nasu Provider komponentu sa nasim storom ovdje,\n//Moramo mu dodati special property store\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n//ReactDOM.render(<p>Hello</p>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}